<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | Paulo Suzart Blog]]></title>
  <link href="http://paulosuzart.github.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://paulosuzart.github.com/"/>
  <updated>2013-09-20T21:43:16-03:00</updated>
  <id>http://paulosuzart.github.com/</id>
  <author>
    <name><![CDATA[Paulo Suzart]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DateParamMatcher for Finagle]]></title>
    <link href="http://paulosuzart.github.com/blog/2011/10/30/dateparammatcher-for-finagle/"/>
    <updated>2011-10-30T23:22:00-02:00</updated>
    <id>http://paulosuzart.github.com/blog/2011/10/30/dateparammatcher-for-finagle</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.github.com/finagle">Twitter Finagle</a> is an amazing framework for RPC communication, and my interest is its HTTP features for creating RESTful APIs.</p>

<p>As I bloged at <a href="http://codemountain.wordpress.com/2011/10/14/twitter-finagle-primeiras-impressoes/">codemountain</a>, I'm using finagle for a personal project. Don't know how far it will go, but the facts is that I'm learning Finagle a lot.</p>

<p>During this project I needed to extract from the query string, a param to be parsed to a twitter.util.Time. I ended up with a Param Matcher to be used my a pattern match agains the requested path. The use of this Param Patcher is:</p>

<p>``` scala Using the DateParamMatcher
//...
Path(request.path) :? request.params match {</p>

<pre><code>   case Root / "myPath" :? RequestTime(requestTimeParam)  =&gt; //do something
</code></pre>

<p>//..
}
//Where RequestTime is defined as
 object RequestTime extends DateParamMatcher("requestTimeParam")
<code>
The source of DateParamMatcher is the following.
</code> scala Param Matcher for twitter.util.Time
import com.twitter.util.Time.<em>
import com.twitter.util.Time
import java.text.ParseException
import com.twitter.finagle.http.path.</em>
import com.twitter.finagle.http.ParamMap</p>

<p>/<em>*
 * Extractor that takes a request parameter and converts it to a {twitter.util.Time}.
 * The date format should conform with {twitter.util.Time} default format.
 </em>/
abstract class DateParamMatcher(name: String) {</p>

<p>  def unapply(params: ParamMap): Option[Time] = params.get(name) flatMap { value =></p>

<pre><code>try {
  Some(at(value))
} catch {
  case ex: ParseException =&gt;
    None
}
</code></pre>

<p>  }
}</p>

<p><code>``
Finagle also provides an abstract</code>com.twitter.finagle.http.path.ParamMatcher<code>as well as</code>LongParamMatcher<code>and</code>IntParamMatcher` in the same package. They are actually Scala  Extractors (very well explained <a href="http://codemonkeyism.com/scala-goodness-extractors/">here</a> by @codemonkeyism). This is a practical way to extract values from a query string and put it available at your code already parsed.</p>

<p>Note that if the param named <code>requestTimeParam</code> is not present or carries a invalid value for <code>Time</code> in the query string the <code>None</code> value is returned.</p>

<p>Although easy to build and extract params from query string and requested path, it is not a Finagle strength. It is kinda limited. A better abstraction is offered by <a href="https://github.com/unfiltered/unfiltered">Unfiltered</a>(another <a href="http://twitter.com/n8han">@n8han's</a> great job).</p>

<p>Hope you enjoy it.</p>

<p><p>Don't forget to visit the <a href="/about">about</a> page. And follow me on Twitter: <a href="http://twitter.com/paulosuzart">@paulosuzart</a>.</p>
</p>
]]></content>
  </entry>
  
</feed>
